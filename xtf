#!/bin/sh
#xkuche01 : Kucher Maryna
#CHECK WITH THE EXIT 0
export POSIXLY_CORRECT=yes

if [ -z "$XTF_PROFIT" ]; then #set default value of profit
    export XTF_PROFIT=20
fi

filtr(){ #function for filter processing 
    if [ "$1" = "-a" ] ; then   
        filtr_a=$1 #qet filter type
        shift #shift to the next argument
        after=$1 #get value for filtering
        shift
        prikaz "$@" #processing command
    elif [ "$1" = "-b" ] ; then
        filtr_b=$1
        shift
        before=$1
        shift 
        prikaz "$@"
    elif [ "$1" = "-c" ] ; then
        filtr_c=$1
        shift
        currency=$1
        shift 
        prikaz "$@"   

    else
        prikaz "$@" #if there is no filters
    fi

}

prikaz(){
    #check if this can be command
    if [ "$1" = "list" ] || [ "$1" = "list-currency" ] || [ "$1" = "status" ] || [ "$1" = "profit" ]; then
        prikaz=$1
        shift
        uzivatel "$@" #processing user name
    elif [ "$1" = "-a" ] || [ "$1" = "-b" ] || [ "$1" = "-c" ] ; then 
    #several filters recursive processing
        filtr "$@"  
    else
        prikaz="list" #set the default command
        uzivatel "$@"
    fi
}

uzivatel(){
    name=$1
    shift
    log "$@" #go to file processing
}

log(){
    #there is no logfile
    if [ -z "$1" ]; then
        echo "no logfile" >&2
        exit 1 
    fi
    #cycle for several logs processing
    for arg in "$@"; do
        #check if the processing argument is a file
        if [ -f "$arg" ]; then 
            #different processing for simple files and .gz
            case "$arg" in
            *.gz) 
                if [ -n "$newlist" ]; then 
                    #if there was text from another file in output variable 
                    #append it 
                    appended=$(zcat "$arg")
                    newlist="$newlist\n""$appended" 
                else
                    #if output variable vas empty -> this is first file to process
                    #just fill the variable
                    newlist=$(zcat "$arg")
                fi
                ;;
            *) 
                if [ -n "$newlist" ]; then
                    newlist=$(echo "$newlist" | cat - "$arg")
                else
                    newlist=$(cat "$arg")
                fi
                ;;
            esac
            #filtering 
            if [ "$filtr_a" ]; then
                #update list in output variable according to the type of filtr
                newlist=$(echo "$newlist" | awk -v date="$after" -F ';' '$2 > date' )
            fi
            if [ "$filtr_b" ]; then
                newlist=$(echo "$newlist" | awk -v date="$before" -F ';' '$2 < date' )
            fi
            if [ "$filtr_c" ]; then
                newlist=$(echo "$newlist" | awk -v currency="$currency" -F ';' '$3 == currency' )
            fi
        else
            echo "$1 is not a file" >&2
            exit 1
        fi

    done  
            #comand processing   
            if [ "$prikaz" = "list-currency" ]; then
                #print third part with the currency for selected name
                echo "$newlist" | grep "$name"| awk -F ';' '{print $3}' | sort -u  
                exit 0  
            elif [ "$prikaz" = "list" ]; then
                #find rows with name and print them
                echo "$newlist" | grep "$name" 
                exit 0
            elif [ "$prikaz" = "status" ]; then
                echo "$newlist" | grep "$name"| awk -F ';' '
                    {
                        #if this currency is in array, add amount to the balance
                        if ($3 in currency_arr) {
                            currency_arr[$3] += $4
                        } else {
                            #create a new balance for new currency
                            currency_arr[$3] = $4
                        }
                    }
                    END {
                        #print balance for every currency
                        for (currency in currency_arr) {
                            printf "%s : %.4f\n" , currency , currency_arr[currency]
                        }
                    }
                ' | sort 
                exit 0 
            elif [ "$prikaz" = "profit" ]; then
                echo "$newlist" | grep "$name" | awk -F ';' -v XTF_PROFIT="$XTF_PROFIT" '
                    {
                        if ($3 in currency_arr) {
                            currency_arr[$3] += $4
                        } else {
                            currency_arr[$3] = $4
                        }
                    }
                    END {
                        for (currency in currency_arr) {
                            #for positive amount add profit
                            if (currency_arr[currency] > 0){
                                num = currency_arr[currency] * XTF_PROFIT * 0.01
                                currency_arr[$3] +=  num
                            }
                            printf "%s : %.4f\n" , currency , currency_arr[currency]
                        }
                    }
                ' | sort
                exit 0

            fi
}

#argument help processing
if [ "$1" = "-hl" ] || [ "$1" = "--help" ]; then
    echo "xtf [-h|--help] [FILTR] [PŘÍKAZ] UŽIVATEL LOG [LOG2 [...] "
    echo "
PŘÍKAZ může být jeden z:
    list – výpis záznamů pro daného uživatele.
    list-currency – výpis seřazeného seznamu vyskytujících se měn.
    status – výpis skutečného stavu účtu seskupeného a seřazeného dle jednotlivých měn.
    profit – výpis stavu účtu zákazníka se započítaným fiktivním výnosem.

FILTR může být kombinace následujících:
    -a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu a čase (bez něj). DATETIME je formátu YYYY-MM-DD HH:MM:SS.
    -b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem a časem (bez něj).
    -c CURRENCY – jsou uvažovány pouze záznamy odpovídající dané měně."
    exit 0

elif [ -z "$1" ]; then # if there is no arguments
    echo "no arguments" >&2
    exit 1
else
    #start arguments processing
    filtr "$@"

fi
